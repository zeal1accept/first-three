Git是一款开源的分布式的版本控制系统  是一个应用程序

作用
1 代码备份
2 版本回退
3 协作开发
4 权限控制

Linux常用命令
开源免费操作系统
ls 查看文件夹下的文件列表

cd进入某一个文件夹 改变工作目录
1-返回上一个文件夹 cd ..   ----有一个空格加上两个点

2-去某一个目录 cd 1-Linux

3-借助cd可以进入到电脑硬盘的任何的一个位置 cd /f 进入F盘

4 如果想去某个目录 名称太长可以按住table键进行识别

5 clear快速清楚屏幕或者ctrl+l ---快捷键

6 创建文件夹 mkdir 名称 ---就可以在当前目录下创建一个文件夹 
7新创建文件 touch  名称    如果是创建记事本就是名称.txt

8 删除文件 remove 名称   用rm删除的文件不会进入回收站
rm / -rf 将次硬盘所有的东西都删除  删库跑路
删除文件的时候 需要加 -r

9  mv移动文件  mv 移动文件的名字  移动到的目的地的路径

mv也可以对文件进行重命名  mv 需要移动的文件  目的地路径/新名

10  cat用来查看文件里面的内容  1--要在当前目录  2 cat 需要查看的路径

11- ctrl+c 取消命令  c---cancel

12 上下方向键 可以查看历史的指令


操作系统的交互方式
图形化 和 命令行

Vim是一款命令行下的文本编辑器  编辑方式跟图形化编辑器不同
需要在Git dash 下来进行运行 
需要先创建文件  然后 想要编辑谁就把文件放在vim的后面 、、
vim  文件
进入之后需要先进入插入模式 i  写完之后按esc 退出插入模式就可以进入命令模式  然后在输入: 进入底线命令模式 然后wq 可以写在一起
快捷键 ctrl+insert 复制
shift + insert  粘贴


Git的初始化配合
初始配置
第一次使用Git的时候 需要我们配置用户名和邮箱 用于显示开发者信息
git config --global user.name " your name"
git config --global user.email " email@example.com"
git config -l 可以查看是否注册成功

Git命令以及参数的介绍

Git初体验
基本操作
1 创建并进入空文件夹
2 右键-> 点击 Git Bash Here启动命令行
3 git init 仓库初始化
4 创建一个初始化文件 index.html
5 git add index.html 将文件加入到缓存区
6 git commit -m ‘注释’  提交到仓库 m 是message单词的缩写

git横向体验
初始化的时候 可以是一个空目录 也可以是一个非空目录
git  add 添加的是修改 而不是文件
当添加的项目为多数的时候 
git add -A
如果直接运行 git commit  会弹出一个vim的窗口   然后操作和vim一样 只不过是在里面添加注释  运行commit之后会产生一个存档
只要提交了 后面就可以回到之前的版本

.git 目录的介绍---了解一下 
hook 会放一些钩子脚本  类似于js里面的事件
info 信息的文件夹 exclude里面放的是全局里面的忽略文件
logs 日志   一些记录     提交的一些历史会存放在这个里面
object 是整个文件夹的仓库目录 每一次提交都会将代码存储到object 里面
refs  分支信息
COMMIT_EDITMSG  最后一次提交的文档声明
config  当前仓库的配置文件
HEAD 当前分支的一个路径
index  暂存区的内容 用add加入文件相当于就是存入这个里面

！！！！GIT 版本库的三个区域
创建和初始化版本库 init
每一个GIT都有三个区域
工作区--代码编辑区
暂存区--修改待提交区 index
仓库区--代码保存区  object
git ls-files 用来查看缓存区的文件的内容


git status 查看当前版本库的状态
如果代码 nothing to commit ， working tree clean 代表所有的已经提交了
如果在工作去修改 但是没有到缓存区可以  restore 进行回弹
git restore 文件名

删除文件
add也可以用来进行删除  挡在外部进行删除的时候 需要add 一下 然后 commit进行提交注释

当接收手到一个新的仓库时
git status颜色说明
红色 表示此修改只存在于工作区
绿色 表示此修改只存在于工作区 和 暂存区

只有进行git init之后才是一个git仓库  要先初始化文件夹

最新版本的差异
git diff  显示工作区和缓存区的差异 （不显示新增文件）显示做了哪些修改
git diff  --cached 查看暂存区和仓库的差异

历史版本回滚
查看历史记录
git log 可以通过方向键来 查看以前更多的历史记录  按q或者 ctrl c 进行退出

git log --oneline    剪短的显示方式  查看历史记录的时候 会全部挤在一起

只要提交过存过档的可以  根据 git reset --hard 加上哈希值 进行回退
如果用 reset回到了以前的版本 再用 git log进行查看时 只能看到当前回退版本之前的记录了  所以徐亚用 git reflog 查看所有记录



git仓库当中 如何配置忽略文件
1 临时文件
2 多媒体文件 如音频 视频
3 编辑器生成的配置文件
4 npm安装的第三方模块
忽略所有的.idea 文件夹
忽略所有以  .test 结尾的文件夹
忽略 node_modules 文件和文件夹

1--仓库中原本没有这样的文件
首先需要在 同级目录下  创建一个.gitignore
在里面写忽略规则  /app.swp  让git忽略当前文件夹下的app.swp

#在此文件夹忽略文件
/app.swp
#让git忽略当前文件夹下的 app.swp文件

#直接写名字  忽略所有名为 test.mp3的文件 无论是在当前文件夹 还是子文件夹都会直接忽略
test.mp3
#忽略指定后缀的文件
*.mp4  
#在当前项目中只要以mp4 结尾都会被忽略

2--忽略仓库已有的文件
第一步 先去版本库里面删除原来的文件
 git rm --cached .idea
第二部 在 .gitignore中去忽略

第三部 add 和commit 提交即可‘’


Git分支的介绍！！！
分支是Git 重要的功能特征之一 开发人员可以在主开发线的基础上分离出新的开发线  branch


分支命令的演示
git branch name 创建分支

查看当前仓库有哪一些分支 
git branch
*master 表示在当前master分支上面

切换分支
git checkout name

合并分支 git merge name
合并的时候需要在主进程上面合并---进行分支的合并 但是原来的分支还是有

删除分支
git branch -d name

创建并切换分支---一条命令完成两个操作
git branch -b name

每次切换分支的时候 提交一下当前分支
如果在切换分支的时候 没有存档直接进行切换的话 分支上面的内容会对主线的内容产生影响

Git！！！！ 分支冲突的解决
冲突查看的方式 
1- 当两个文件合并时 如果有冲突会显示 MERGING
2-或者git status 进行查看

当两个分支修改同一个文件后 合并分支的时候会产生冲突  冲突解决非常简单 
只需要将文件的内容修稿改成最终需要修改的样子即可  然后执行 add commit

1 git status 定位有冲突的位置
2 修改冲突文件的内容 为最终正确的样子
3 add commit 提交即可


GitHub
是一个git仓库的管理网站 可以创建远程中心仓库  为多人合作开发提供便利
 
！！首先要在本地里面先提交

将本地仓库推送到GitHub
1 注册并激活账号
2 创建仓库   new repository
3 获取仓库的地址
4 本地配置远程仓库的地址 

GitTub会自动将 readme 的内容进行解析 然后放在下面 

git remote add h5-别名  仓库地址
git push -u origin dev
origin是远端仓库的别名
-u代表  如果加了-u 后面就可以直接git push了
git push dev master：main  将master推送到远端另一个分支main

git pull origin（别名） master（分支） 在自己文件夹 拉入别人提交到github上面的代码

仓库的克隆----后来加入一个项目
git clone 仓库地址 （创建新的文件夹 然后将克隆的文件放到里面）
  就可以直接克隆到当前 git bash目录
对于克隆回来的文件 远控 有一个默认的别名---origin


使用github进行多人协作  多人操作
1 首页 右上角加号 new Organization
2 免费计划
3 填写组织名称和联系方式 
4 邀请开发者加入组织
5 点击组织右侧 settings设置
6 左侧 Member priviledges
7 右侧 Base permissions 设置 write


只有在第一次获取别人的代码的时候 会执行clone 其他时候都是pull

当两个人写的代码 一样的时候 进行提交的时候会进行报错 所以这个时候 第二个提交的人需要  将第一个人的代码pull回来 然后进行合并  :wq  然后在git push带远仓  然后第一个提交的人在进行同步

常见的问题 千万不要仓库套仓库
就是克隆只需要第一次运行 其余的时候都是pull代码 如果是克隆了两次就是 仓库套仓库 这样子就无法提交成功


Git使用流程
GitHub 不是唯一的中心仓库平台、 有的公司是使用 gitLab去搭建自己私有的平台

1 第一次 得到Git远程仓库的代码和账号密码
2 将代码克隆到本地  --克隆一般只会执行一次
git clone 会将仓库的所有的分支全部下载下来
git pull 只会拉去指定的分支内容
3  切换分支 写自己的代码
4 本地提交 git add  git commit
5 合并分支 ----合并的时候要在上一级进行合并
 所以  git checkout master ， git merge xiaohigh
6 更新本地代码 pull
7 提交代码

第二次流程
1 


密钥
查看密码 cd ~/.ssh

带后缀的是公钥
不带是私钥  需要保存好


gitee码云



